version: 2
jobs:
  build:
    # この設定はcheckout先の指定であって、repository内のdirectoryは指定できない
    working_directory: ~/self_management

    # すべてのコマンドを実行する場所となるプライマリ コンテナ イメージ

    docker:

      - image: circleci/ruby:2.6.5-node-browsers-legacy
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: root

    # `host: localhost` でアクセスできるサービス コンテナ イメージ

      - image: circleci/postgres:13.0-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: self_management_test
    working_directory: ~/self_management
    steps:

      - checkout

      # Bundler のバージョンを指定します
      - run:
          name: Bundler の指定
          command: bundle -v

      # バンドル キャッシュを復元します

      - restore_cache:
          keys:
            - rails-demo-{{ checksum "Gemfile.lock" }}
            - rails-demo-

      # 依存関係をバンドル インストールします

      - run:
          name: 依存関係のインストール
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs 4 --retry 3

      - run: sudo apt install -y postgresql-client || true

      # バンドル キャッシュを保存します

      - save_cache:
          key: rails-demo-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: DB の待機
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: データベースのセットアップ
          command: |
            bundle exec rake db:create
            bundle exec rake db:structure:load

      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # アーティファクトを保存します

      - store_test_results:
          path: /tmp/test-results